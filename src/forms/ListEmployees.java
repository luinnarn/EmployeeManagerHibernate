package forms;

import entities.*;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author Nikola DragiÄ‡
 */
public class ListEmployees extends JFrame {
    
//    public static Employee updatedEmployee;

    /**
     * Creates new form ListEmployees
     */
    public ListEmployees() {
        initComponents();
        this.setTitle("List of employees");
        writeToTable(getAll());
        filterParameterField.setEnabled(false);
        this.setLocationRelativeTo(null);
    }
    
        private List<Employee> getAll(){
        List<Employee> employees;
        
        //Hibernate
        Session s = HibernateUtil.getSessionFactory().openSession();
        Query query = s.createQuery("from Employee");
        
        employees = query.list();
        return employees;
    }


    private void writeToTable(List<Employee> employees){
        
        DefaultTableModel dtm = (DefaultTableModel) employeeTable.getModel();
        
        int rowCount = employeeTable.getRowCount();
            for(int i=0;i<rowCount;i++){
                dtm.removeRow(0);
            }
            employees.forEach((e) -> {
                dtm.addRow(new Object[] {e.getId(), e.getName(), e.getAge(), e.getAddress(), e.getSalary()});
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        addEmployeeBtn = new javax.swing.JButton();
        removeEmployeeBtn = new javax.swing.JButton();
        updateEmployeeBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        operatorComboBox = new javax.swing.JComboBox<>();
        filterParameterField = new javax.swing.JTextField();
        refreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Age", "Address", "Salary"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        employeeTable.setAlignmentY(5.0F);
        employeeTable.setName("employeeTable"); // NOI18N
        employeeTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(employeeTable);
        if (employeeTable.getColumnModel().getColumnCount() > 0) {
            employeeTable.getColumnModel().getColumn(0).setMinWidth(1);
            employeeTable.getColumnModel().getColumn(0).setPreferredWidth(3);
            employeeTable.getColumnModel().getColumn(2).setMinWidth(1);
            employeeTable.getColumnModel().getColumn(2).setPreferredWidth(3);
        }

        addEmployeeBtn.setText("Add employee");
        addEmployeeBtn.setMaximumSize(new java.awt.Dimension(140, 23));
        addEmployeeBtn.setMinimumSize(new java.awt.Dimension(140, 23));
        addEmployeeBtn.setPreferredSize(new java.awt.Dimension(140, 25));
        addEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeBtnActionPerformed(evt);
            }
        });

        removeEmployeeBtn.setText("Remove selected");
        removeEmployeeBtn.setMaximumSize(new java.awt.Dimension(140, 23));
        removeEmployeeBtn.setMinimumSize(new java.awt.Dimension(140, 23));
        removeEmployeeBtn.setPreferredSize(new java.awt.Dimension(140, 25));
        removeEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEmployeeBtnActionPerformed(evt);
            }
        });

        updateEmployeeBtn.setText("Update selected");
        updateEmployeeBtn.setMaximumSize(new java.awt.Dimension(140, 23));
        updateEmployeeBtn.setMinimumSize(new java.awt.Dimension(140, 23));
        updateEmployeeBtn.setPreferredSize(new java.awt.Dimension(140, 25));
        updateEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateEmployeeBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Filter employees where salary is");

        operatorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"all", "=", "<", ">"}));
        operatorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operatorComboBoxActionPerformed(evt);
            }
        });

        filterParameterField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterParameterFieldActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(updateEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(removeEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(operatorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(filterParameterField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 150, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(operatorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterParameterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(removeEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeBtnActionPerformed
        AddEmployee addEmployee = new AddEmployee();
        addEmployee.setVisible(true);
    }//GEN-LAST:event_addEmployeeBtnActionPerformed

    private void updateEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateEmployeeBtnActionPerformed
        int selectedRow = employeeTable.getSelectedRow();
        if (selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Select an employee from the table");
        } else {
            Session s = HibernateUtil.getSessionFactory().openSession();
            Employee updatedEmployee = (Employee)s.get(Employee.class, (int)employeeTable.getValueAt(selectedRow, 0));
            UpdateEmployee updateEmployee = new UpdateEmployee(updatedEmployee);
            updateEmployee.setVisible(true);
            
        }
    }//GEN-LAST:event_updateEmployeeBtnActionPerformed

    private void removeEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEmployeeBtnActionPerformed
        int selectedRow = employeeTable.getSelectedRow();
        if (selectedRow == -1){
            JOptionPane.showMessageDialog(this, "Select an employee from the table");
        } else {
            int reply = JOptionPane.showConfirmDialog(this, "Are you sure?", "Remove employee", JOptionPane.OK_CANCEL_OPTION);
            if (reply == JOptionPane.OK_OPTION) {
                Session s = HibernateUtil.getSessionFactory().openSession();
                s.beginTransaction();
                Employee e = (Employee)s.get(Employee.class, (int)employeeTable.getValueAt(selectedRow, 0));
                s.delete(e);
                s.getTransaction().commit();
                writeToTable(getAll());
            }   
        }
    }//GEN-LAST:event_removeEmployeeBtnActionPerformed

    private void operatorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operatorComboBoxActionPerformed
        if (!operatorComboBox.getSelectedItem().toString().equalsIgnoreCase("all")){
            filterParameterField.setEnabled(true);
        } else {
            filterParameterField.setEnabled(false);
        }
    }//GEN-LAST:event_operatorComboBoxActionPerformed

    private void filterParameterFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterParameterFieldActionPerformed
        
    }//GEN-LAST:event_filterParameterFieldActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        String filter = new String();
        if (operatorComboBox.getSelectedItem().toString().equalsIgnoreCase("all")){
            filter = "";
        } else {
            if (filterParameterField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Enter a value for comparison");
            } else {
                filter = "where salary " + operatorComboBox.getSelectedItem().toString() + " " + filterParameterField.getText();
            }
        }
        Session s = HibernateUtil.getSessionFactory().openSession();
        Query query = s.createQuery("from Employee " + filter);
        List<Employee> employees = query.list();
        writeToTable(employees);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        writeToTable(getAll());
    }//GEN-LAST:event_formFocusGained

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        writeToTable(getAll());
    }//GEN-LAST:event_formWindowGainedFocus

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ListEmployees().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEmployeeBtn;
    private javax.swing.JTable employeeTable;
    private javax.swing.JTextField filterParameterField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> operatorComboBox;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton removeEmployeeBtn;
    private javax.swing.JButton updateEmployeeBtn;
    // End of variables declaration//GEN-END:variables
}
